diff --git a/src/streamlink/plugins/twitch.py b/src/streamlink/plugins/twitch.py
index ceac45c9..7f7d8a41 100644
--- a/src/streamlink/plugins/twitch.py
+++ b/src/streamlink/plugins/twitch.py
@@ -10,13 +10,14 @@ $notes :ref:`Low latency streaming <cli/plugins/twitch:Low latency streaming>` i
 import argparse
 import base64
 import logging
+import os
 import re
 import sys
 from datetime import datetime, timedelta
 from json import dumps as json_dumps
 from random import random
 from typing import List, Mapping, NamedTuple, Optional, Tuple
-from urllib.parse import urlparse
+from urllib.parse import quote, urlparse
 
 from streamlink.exceptions import NoStreamsError, PluginError
 from streamlink.plugin import Plugin, pluginargument, pluginmatcher
@@ -25,7 +26,7 @@ from streamlink.session import Streamlink
 from streamlink.stream.hls import HLSStream, HLSStreamReader, HLSStreamWorker, HLSStreamWriter
 from streamlink.stream.hls_playlist import M3U8, ByteRange, DateRange, ExtInf, Key, M3U8Parser, Map, load as load_hls_playlist
 from streamlink.stream.http import HTTPStream
-from streamlink.utils.args import keyvalue
+from streamlink.utils.args import comma_list, keyvalue
 from streamlink.utils.parse import parse_json, parse_qsd
 from streamlink.utils.random import CHOICES_ALPHA_NUM, random_token
 from streamlink.utils.times import fromtimestamp, hours_minutes_seconds
@@ -181,6 +182,17 @@ class TwitchHLSStreamWriter(HLSStreamWriter):
     stream: "TwitchHLSStream"
 
     def should_filter_sequence(self, sequence: TwitchSequence):  # type: ignore[override]
+        if self.stream.reexec_on_ad and sequence.segment.ad:
+            log.info("Encountered an ad segment, re-execing to retrieve a new playlist")
+            log.debug(f"argv: {sys.argv}")
+            if sys.platform == "win32":
+                # Python Win32 bug https://bugs.python.org/issue436259
+
+                from subprocess import list2cmdline
+                os.execl(sys.executable, list2cmdline([sys.executable] + sys.argv))
+            else:
+                os.execv(sys.argv[0], sys.argv)
+
         return self.stream.disable_ads and sequence.segment.ad
 
 
@@ -193,6 +205,9 @@ class TwitchHLSStreamReader(HLSStreamReader):
     stream: "TwitchHLSStream"
 
     def __init__(self, stream: "TwitchHLSStream"):
+        if stream.reexec_on_ad:
+            stream.disable_ads = False
+            log.info("Will re-exec on ad segments")
         if stream.disable_ads:
             log.info("Will skip ad segments")
         if stream.low_latency:
@@ -206,10 +221,11 @@ class TwitchHLSStreamReader(HLSStreamReader):
 class TwitchHLSStream(HLSStream):
     __reader__ = TwitchHLSStreamReader
 
-    def __init__(self, *args, disable_ads: bool = False, low_latency: bool = False, **kwargs):
+    def __init__(self, *args, disable_ads: bool = False, low_latency: bool = False, reexec_on_ad: bool = False, **kwargs):
         super().__init__(*args, **kwargs)
         self.disable_ads = disable_ads
         self.low_latency = low_latency
+        self.reexec_on_ad = reexec_on_ad
 
 
 class UsherService:
@@ -254,6 +270,73 @@ class UsherService:
         return self._create_url(f"/vod/{video_id}", **extra_params)
 
 
+class NoPlaylistProxyAvailable(Exception):
+    """
+    No playlist proxies available.
+    """
+
+
+class PlaylistProxyService:
+    def __init__(self, session, playlist_proxies, excluded_channels, fallback, ttvlol):
+        self.session = session
+        self.playlist_proxies = playlist_proxies or []
+        self.excluded_channels = map(str.lower, excluded_channels or [])
+        self.fallback = fallback
+
+        if ttvlol:
+            self.playlist_proxies = ["https://api.ttv.lol"]
+
+    def _append_query_params(self, url):
+        params = {
+            "player": "twitchweb",
+            "type": "any",
+            "allow_source": "true",
+            "allow_audio_only": "true",
+            "allow_spectre": "false",
+            "fast_bread": "true",
+        }
+        req = self.session.http.prepare_new_request(url=url, params=params)
+
+        return req.url
+
+    def streams(self, channel, **kwargs):
+        if not self.playlist_proxies:
+            raise NoPlaylistProxyAvailable
+
+        if channel in self.excluded_channels:
+            log.info(f"Channel {channel} excluded from playlist proxy")
+            raise NoPlaylistProxyAvailable
+
+        log.debug(f"Getting live HLS streams for {channel}")
+        self.session.http.headers.update({
+            "referer": "https://player.twitch.tv",
+            "origin": "https://player.twitch.tv",
+        })
+        for proxy in self.playlist_proxies:
+            url = re.sub(r"\[channel\]", channel, proxy)
+            parsed_url = urlparse(url)
+
+            if url == proxy:
+                url = quote(self._append_query_params(url + f"/playlist/{channel}.m3u8"), safe=":/")
+                self.session.http.headers["x-donate-to"] = "https://ttv.lol/donate"
+            elif not parsed_url.query:
+                url = self._append_query_params(url)
+
+            log.info(f"Using playlist proxy '{parsed_url.scheme}://{parsed_url.netloc}'")
+            try:
+                return TwitchHLSStream.parse_variant_playlist(self.session, url, **kwargs)
+            except OSError as err:
+                log.error(err)
+            finally:
+                self.session.http.headers.pop("x-donate-to", None)
+
+        if self.fallback:
+            log.info("No playlist proxies available, falling back to Twitch servers")
+            raise NoPlaylistProxyAvailable
+
+        raise NoStreamsError
+
+
 class TwitchAPI:
     CLIENT_ID = "kimne78kx3ncx6brgo4mv6wki5h1ko"
 
@@ -697,6 +780,57 @@ class TwitchClientIntegrity:
     action="store_true",
     help="Purge cached Twitch client-integrity token and acquire a new one.",
 )
+@pluginargument(
+    "proxy-playlist",
+    metavar="URLS",
+    type=comma_list,
+    help="""
+        Proxy playlist request through a server that supports the TTV.LOL API.
+
+        Can be multiple comma separated server URLs to be used as fallback.
+
+        Only livestreams will use the playlist proxy, VODs and clips will use upstream behavior.
+
+        When used the Twitch GraphQL API will not be called.
+        --twitch-api-header and --twitch-access-token-param will have no effect.
+        It will also not be possible to check for subscriber only streams and reruns will be disabled.
+    """,
+)
+@pluginargument(
+    "proxy-playlist-exclude",
+    metavar="CHANNELS",
+    type=comma_list,
+    help="""
+        Exclude specified channel(s) from playlist proxy and fallback to upstream behavior.
+
+        Can be multiple comma separated channel names.
+
+        Useful if you're subscribed to the channel(s) and want to use your OAuth token to avoid ads instead.
+    """,
+)
+@pluginargument(
+    "proxy-playlist-fallback",
+    action="store_true",
+    help="""
+        Fallback to Twitch servers if all requests to playlist proxies fail.
+    """,
+)
+@pluginargument(
+    "ttvlol",
+    action="store_true",
+    help="""
+        Alias for --twitch-proxy-playlist=https://api.ttv.lol
+        Overrides --twitch-proxy-playlist
+    """,
+)
+@pluginargument(
+    "reexec-on-ad",
+    action="store_true",
+    help="""
+        Re-executes Streamlink to retrieve a new playlist when encountering an embedded advertisement segment.
+        Overrides --twitch-disable-ads.
+    """,
+)
 class Twitch(Plugin):
     _CACHE_KEY_CLIENT_INTEGRITY = "client-integrity"
 
@@ -717,6 +851,9 @@ class Twitch(Plugin):
         self.clip_name = None
         self._checked_metadata = False
 
+        log.info("streamlink-ttvlol e9500dff-master")
+        log.info("Please report issues to https://github.com/2bc4/streamlink-ttvlol/issues")
+
         if self.subdomain == "player":
             # pop-out player
             if self.params.get("video"):
@@ -736,6 +873,13 @@ class Twitch(Plugin):
             access_token_param=self.get_option("access-token-param"),
         )
         self.usher = UsherService(session=self.session)
+        self.playlist_proxy = PlaylistProxyService(
+                session=self.session,
+                playlist_proxies=self.get_option("proxy-playlist"),
+                excluded_channels=self.get_option("proxy-playlist-exclude"),
+                fallback=self.get_option("proxy-playlist-fallback"),
+                ttvlol=self.get_option("ttvlol"),
+        )
 
         def method_factory(parent_method):
             def inner():
@@ -899,7 +1043,15 @@ class Twitch(Plugin):
         elif self.clip_name:
             return self._get_clips()
         elif self.channel:
-            return self._get_hls_streams_live()
+            try:
+                return self.playlist_proxy.streams(
+                    channel=self.channel,
+                    disable_ads=self.get_option("disable-ads"),
+                    low_latency=self.get_option("low-latency"),
+                    reexec_on_ad=self.get_option("reexec-on-ad"),
+                )
+            except NoPlaylistProxyAvailable:
+                return self._get_hls_streams_live()
 
 
 __plugin__ = Twitch
