diff --git a/src/streamlink/plugins/twitch.py b/src/streamlink/plugins/twitch.py
index 8cb647fa..fb9eba69 100644
--- a/src/streamlink/plugins/twitch.py
+++ b/src/streamlink/plugins/twitch.py
@@ -9,12 +9,13 @@ $notes :ref:`Low latency streaming <cli/plugins/twitch:Low latency streaming>` i
 
 import argparse
 import logging
+import os
 import re
 import sys
 from datetime import datetime, timedelta
 from random import random
 from typing import List, NamedTuple, Optional
-from urllib.parse import urlparse
+from urllib.parse import quote, urlparse
 
 from streamlink.exceptions import NoStreamsError, PluginError
 from streamlink.plugin import Plugin, pluginargument, pluginmatcher
@@ -22,7 +23,7 @@ from streamlink.plugin.api import validate
 from streamlink.stream.hls import HLSStream, HLSStreamReader, HLSStreamWorker, HLSStreamWriter
 from streamlink.stream.hls_playlist import M3U8, ByteRange, DateRange, ExtInf, Key, M3U8Parser, Map, load as load_hls_playlist
 from streamlink.stream.http import HTTPStream
-from streamlink.utils.args import keyvalue
+from streamlink.utils.args import comma_list, keyvalue
 from streamlink.utils.parse import parse_json, parse_qsd
 from streamlink.utils.times import hours_minutes_seconds
 from streamlink.utils.url import update_qsd
@@ -177,6 +178,17 @@ class TwitchHLSStreamWriter(HLSStreamWriter):
     stream: "TwitchHLSStream"
 
     def should_filter_sequence(self, sequence: TwitchSequence):  # type: ignore[override]
+        if self.stream.reexec_on_ad and sequence.segment.ad:
+            log.info("Encountered an ad segment, re-execing to retrieve a new playlist")
+
+            if sys.platform == "win32":
+                # Python Win32 bug https://bugs.python.org/issue436259
+
+                from subprocess import list2cmdline
+                os.execl(sys.executable, list2cmdline([sys.executable] + sys.argv))
+            else:
+                os.execv(sys.argv[0], sys.argv)
+
         return self.stream.disable_ads and sequence.segment.ad
 
 
@@ -206,6 +218,7 @@ class TwitchHLSStream(HLSStream):
         super().__init__(*args, **kwargs)
         self.disable_ads = self.session.get_plugin_option("twitch", "disable-ads")
         self.low_latency = self.session.get_plugin_option("twitch", "low-latency")
+        self.reexec_on_ad = self.session.get_plugin_option("twitch", "reexec-on-ad")
 
 
 class UsherService:
@@ -250,6 +263,65 @@ class UsherService:
         return self._create_url(f"/vod/{video_id}", **extra_params)
 
 
+class TTVLOLService:
+    def __init__(self, plugin):
+        self.plugin = plugin
+        self.session = self.plugin.session
+        self.playlist_proxies = self.session.get_plugin_option("twitch", "proxy-playlist") or []
+        self.excluded_channels = map(str.lower, self.session.get_plugin_option("twitch", "proxy-playlist-exclude") or [])
+
+        if self.session.get_plugin_option("twitch", "ttvlol"):
+            self.playlist_proxies = ["https://api.ttv.lol"]
+
+    def _append_query_params(self, url):
+        params = {
+            "player": "twitchweb",
+            "type": "any",
+            "allow_source": "true",
+            "allow_audio_only": "true",
+            "allow_spectre": "false",
+            "fast_bread": "true",
+        }
+
+        req = self.session.http.prepare_new_request(url=url, params=params)
+
+        return req.url
+
+    def streams(self, channel):
+        if channel in self.excluded_channels:
+            log.info(f"Channel {channel} excluded from playlist proxy")
+            return self.plugin._get_hls_streams_live()
+
+        log.debug(f"Getting live HLS streams for {channel}")
+        self.session.http.headers.update({
+            "referer": "https://player.twitch.tv",
+            "origin": "https://player.twitch.tv",
+        })
+
+        for proxy in self.playlist_proxies:
+            url = re.sub(r"\[channel\]", channel, proxy)
+            parsed_url = urlparse(url)
+
+            if url == proxy:
+                url = quote(self._append_query_params(url + f"/playlist/{channel}.m3u8"), safe=":/")
+                self.session.http.headers["X-Donate-To"] = "https://ttv.lol/donate"
+            elif not parsed_url.query:
+                url = self._append_query_params(url)
+
+            log.info(f"Using playlist proxy '{parsed_url.scheme}://{parsed_url.netloc}'")
+            log.debug(f"Raw playlist proxy URL: '{url}'")
+
+            try:
+                streams = TwitchHLSStream.parse_variant_playlist(self.session, url)
+
+                self.session.http.headers.pop("X-Donate-To", None)
+                return streams
+            except OSError as err:
+                log.error(err)
+
+        raise PluginError("No playlist proxies available.")
+
+
 class TwitchAPI:
     CLIENT_ID = "kimne78kx3ncx6brgo4mv6wki5h1ko"
 
@@ -568,6 +640,49 @@ class TwitchAPI:
         Can be repeated to add multiple parameters.
     """,
 )
+@pluginargument(
+    "proxy-playlist",
+    metavar="URL",
+    type=comma_list,
+    help="""
+        Proxy playlist request through a server that supports the TTV.LOL API.
+
+        Can be multiple comma separated server URLs to be used as fallback.
+
+        Only livestreams will use the playlist proxy, VODs and clips will use upstream behavior.
+
+        When used the Twitch GraphQL API will not be called.
+        --twitch-api-header and --twitch-access-token-param will have no effect.
+        It will also not be possible to check for subscriber only streams and reruns will be disabled.
+    """,
+)
+@pluginargument(
+    "proxy-playlist-exclude",
+    metavar="CHANNELS",
+    type=comma_list,
+    help="""
+        Exclude specified channel(s) from playlist proxy and fallback to upstream behavior.
+
+        Can be multiple comma separated channel names.
+
+        Useful if you're subscribed to the channel(s) and want to use your OAuth token to avoid ads instead.
+    """,
+)
+@pluginargument(
+    "ttvlol",
+    action="store_true",
+    help="""
+        Alias for --twitch-proxy-playlist=https://api.ttv.lol
+        Overrides --twitch-proxy-playlist
+    """,
+)
+@pluginargument(
+    "reexec-on-ad",
+    action="store_true",
+    help="""
+        Re-executes Streamlink to retrieve a new playlist when encountering an embedded advertisement segment.
+    """,
+)
 class Twitch(Plugin):
     @classmethod
     def stream_weight(cls, stream):
@@ -586,6 +701,9 @@ class Twitch(Plugin):
         self.clip_name = None
         self._checked_metadata = False
 
+        log.info("Streamlink Twitch plugin (2bc4 fork).")
+        log.info("Please report issues to https://github.com/2bc4/streamlink-ttvlol/issues")
+
         if self.subdomain == "player":
             # pop-out player
             if self.params.get("video"):
@@ -601,6 +719,7 @@ class Twitch(Plugin):
 
         self.api = TwitchAPI(session=self.session)
         self.usher = UsherService(session=self.session)
+        self.ttvlol = TTVLOLService(plugin=self)
 
         def method_factory(parent_method):
             def inner():
@@ -722,7 +841,10 @@ class Twitch(Plugin):
         elif self.clip_name:
             return self._get_clips()
         elif self.channel:
-            return self._get_hls_streams_live()
+            if self.ttvlol.playlist_proxies:
+                return self.ttvlol.streams(self.channel)
+            else:
+                return self._get_hls_streams_live()
 
 
 __plugin__ = Twitch
